class Tuple{
    TreeNode node;
    int row;
    int col;
    public Tuple(TreeNode n, int x, int y){
        node = n;
        row = x;
        col = y;
    }
}

class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map = new TreeMap<>();
        if(root == null) return null;
        Queue<Tuple> q = new LinkedList<>();
        q.offer(new Tuple(root,0,0));
        
        
        while(!q.isEmpty()){
            Tuple tuple = q.poll();
            TreeNode node = tuple.node;
            int x = tuple.row;
            int y = tuple.col;
            
            if(!map.containsKey(x))
                map.put(x,new TreeMap());
            
            if(!map.get(x).containsKey(y))
                map.get(x).put(y, new PriorityQueue<>());

            map.get(x).get(y).offer(node.val);
            
            if(node.left != null)
                q.offer(new Tuple(node.left, x-1, y+1));
            if(node.right != null)
                q.offer(new Tuple(node.right, x+1, y+1));
      
        }
        
        List<List<Integer>> ans = new ArrayList<>();
        //foreach loop
        for( TreeMap<Integer, PriorityQueue<Integer>> innerMap: map.values()){
            ans.add(new ArrayList<>());
            for( PriorityQueue<Integer> pq: innerMap.values()){
                while(!pq.isEmpty()){
                    ans.get(ans.size()-1).add(pq.poll());
                }
            }
        }
        return ans;
    }
}
