class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null) return ans;
        
        Queue<TreeNode> q = new LinkedList<>();
        boolean flag = true;
        q.offer(root);
        
        while(!q.isEmpty()){
            int level = q.size();
            List<Integer> list = new ArrayList<>();
            for(int i=0; i< level; i++){
                TreeNode node = q.poll();

                if(node.left != null)
                    q.offer(node.left);
                if(node.right != null)
                    q.offer(node.right);
                
                if(flag)
                    list.add(node.val);
                else
                    list.add(0,node.val);
            }
            ans.add(list);
            flag = !flag;
        }
        
        return ans;
    }
}
//using dfs

class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        return zigzagLevelOrderUsingDFS(root);
    }
    private List<List<Integer>> zigzagLevelOrderUsingDFS(TreeNode root) {
        List<List<Integer>> res = new ArrayList();
        
        if (root == null) {
            return res;
        }
        
        DFS(root, res, 0);
        
        return res;
    }
    
    private void DFS(TreeNode node, List<List<Integer>> res, int level) {
        if (node == null) return;
        
        if (res.size() == level) {
            List<Integer> list = new ArrayList();
            list.add(node.val);
            res.add(list);
        } else {
            if (level % 2 == 0) {
                res.get(level).add(node.val);
            } else {
                res.get(level).add(0, node.val);
            }
        }
        
        DFS(node.left, res, level + 1);
        DFS(node.right, res, level + 1);
    }
}
