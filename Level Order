class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        List<List<Integer>> ans = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        
        if(root == null) return ans;
        
        q.offer(root);
        
        while(!q.isEmpty()){
            int level = q.size();
            List<Integer> list = new ArrayList<>();
            
            for(int i=0; i<level; i++){
                if(q.peek().left != null){
                    q.offer(q.peek().left);
                }
                if(q.peek().right != null){
                    q.offer(q.peek().right);
                }
                
                list.add(q.poll().val);
            }
            
            ans.add(list);
        }
        
        return ans;
    }
}

// same approach just stored the value from q.poll() in a pointer;
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        List<List<Integer>> ans = new ArrayList<>();
        if(root == null) return ans;

        Queue<TreeNode> q = new LinkedList<>();        
        q.offer(root);
        
        while(!q.isEmpty()){
            int level = q.size();
            List<Integer> list = new ArrayList<>();
            for(int i=0; i<level; i++){
                TreeNode temp = q.poll();

                if(temp.left != null){
                    q.offer(temp.left);
                }
                if(temp.right != null){
                    q.offer(temp.right);
                }
                
                list.add(temp.val);
            }
            
            ans.add(list);
        }
        
        return ans;
    }
}
