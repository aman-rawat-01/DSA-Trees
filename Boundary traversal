class Solution
{
	ArrayList<Integer> boundary(Node node)
	{
	    ArrayList<Integer> ans = new ArrayList<>();
	    if(node == null) return ans;
	    if(isLeaf(node) == false)
	        ans.add(node.data);
	    
	    leftBoundary( node, ans);
	    addLeaves( node, ans);
	    rightBoundary( node, ans);
	    return ans;
	}
	
	void leftBoundary(Node node, ArrayList<Integer> res){
	    Node curr = node.left;
	    
	    while(curr !=null){
	       if(isLeaf(curr) == false)
	            res.add(curr.data);
	       if(curr.left !=null)
	            curr = curr.left;
	       else
	            curr = curr.right;
	    }
	}
	void rightBoundary(Node node, ArrayList<Integer> res){
	    Node curr = node.right;
	    ArrayList<Integer> temp = new ArrayList<>();
	    while(curr != null){
	        if(isLeaf(curr) == false)
	            temp.add(0,curr.data);
	        if(curr.right != null)
	            curr = curr.right;
	        else
	            curr = curr.left;
	    }
	    for(int element: temp)
	        res.add(element);
	}
	
	void addLeaves(Node node, ArrayList<Integer> res){
	    if(isLeaf(node)){
	        res.add(node.data);
	        return;
	    }
	    if(node.left != null)
	        addLeaves(node.left, res);
	   if(node.right != null)
	        addLeaves(node.right, res);
	}
	boolean isLeaf(Node node){
	    if((node.left == null) && (node.right == null))
	        return true;
	    return false;
	}
	
}
